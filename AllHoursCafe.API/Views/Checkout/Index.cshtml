@model AllHoursCafe.API.Controllers.CheckoutViewModel

@{
    ViewData["Title"] = "Checkout";
}

<link rel="stylesheet" href="/css/saved-addresses.css" />

<section class="checkout-section">
    <div class="container">
        <div class="checkout-header">
            <h1>Checkout</h1>
            <p>Complete your order by providing your details below</p>
        </div>

        <div class="checkout-content">
            <div class="checkout-form-container">
                <form asp-controller="Checkout" asp-action="Index" method="post" id="checkoutForm">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-section">
                        <h2>Delivery Address</h2>

                        <div class="saved-addresses-section">
                            <div class="saved-addresses-header">
                                <h3>Select Delivery Address</h3>
                                <a href="/Address" class="manage-addresses-link">
                                    <i class="fas fa-edit"></i> Manage Addresses
                                </a>
                            </div>

                            <div class="saved-addresses-grid">
                                @foreach (var address in Model.SavedAddresses)
                                {
                                    <div class="saved-address-card @(Model.SelectedAddressId == address.Id ? "selected" : "")"
                                         data-id="@address.Id"
                                         data-name="@address.CustomerName"
                                         data-phone="@address.CustomerPhone"
                                         data-address="@address.DeliveryAddress"
                                         data-city="@address.City"
                                         data-state="@address.State"
                                         data-postal="@address.PostalCode">
                                        <div class="address-card-radio">
                                            <input type="radio" name="SelectedAddressId" id="address-@address.Id" value="@address.Id"
                                                   @(Model.SelectedAddressId == address.Id ? "checked" : "") />
                                            <label for="address-@address.Id"></label>
                                        </div>
                                        <div class="address-card-content">
                                            <h4>@address.Name</h4>
                                            <p><strong>@address.CustomerName</strong></p>
                                            <p>@address.DeliveryAddress</p>
                                            <p>@address.City, @address.State @address.PostalCode</p>
                                            <p>@address.CustomerPhone</p>
                                        </div>
                                        @if (address.IsDefault)
                                        {
                                            <div class="default-badge">Default</div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Hidden fields to store the selected address details -->
                        <input type="hidden" asp-for="Order.CustomerName" id="customerName" />
                        <input type="hidden" asp-for="Order.CustomerPhone" id="customerPhone" />
                        <input type="hidden" asp-for="Order.DeliveryAddress" id="deliveryAddress" />
                        <input type="hidden" asp-for="Order.City" id="city" />
                        <input type="hidden" asp-for="Order.State" id="state" />
                        <input type="hidden" asp-for="Order.PostalCode" id="postalCode" />
                        <input type="hidden" asp-for="Order.CustomerEmail" value="@User.Identity.Name" />
                    </div>

                    <div class="form-section">
                        <h2>Delivery Options</h2>



                        <div class="form-group">
                            <label class="control-label">Order Type</label>
                            <div class="order-type-selector">
                                <div class="order-type-option">
                                    <input type="radio" asp-for="Order.OrderType" value="Delivery" id="delivery" checked />
                                    <label for="delivery">
                                        <i class="fas fa-motorcycle"></i>
                                        <span>Delivery</span>
                                    </label>
                                </div>
                                <div class="order-type-option">
                                    <input type="radio" asp-for="Order.OrderType" value="Pickup" id="pickup" />
                                    <label for="pickup">
                                        <i class="fas fa-store"></i>
                                        <span>Pickup</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div id="delivery-fields">
                            <div class="form-group">
                                <label asp-for="Order.DeliveryTime" class="control-label">Preferred Time</label>
                                <input asp-for="Order.DeliveryTime" class="form-control" type="datetime-local" />
                                <span asp-validation-for="Order.DeliveryTime" class="text-danger"></span>
                                <small class="form-text text-muted">Please select a delivery time at least 1 hour from now.</small>
                            </div>

                            <div class="form-group">
                                <label asp-for="Order.SpecialInstructions" class="control-label">Special Instructions</label>
                                <textarea asp-for="Order.SpecialInstructions" class="form-control" rows="3" placeholder="Any special instructions for delivery or food preparation"></textarea>
                                <span asp-validation-for="Order.SpecialInstructions" class="text-danger"></span>
                            </div>
                        </div>


                    </div>

                    <div class="form-actions">
                        <a asp-controller="Menu" asp-action="Index" class="btn-secondary">Back to Menu</a>
                        <input type="submit" class="btn-primary" id="proceedToPaymentBtn" value="Proceed to Payment" />
                    </div>
                </form>
            </div>

            <div class="order-summary">
                <div class="order-summary-header">
                    <h2>Order Summary</h2>
                </div>

                <div class="order-items">
                    @foreach (var item in Model.CartItems)
                    {
                        <div class="order-item" data-item-id="@item.Id">
                            <div class="item-image">
                                <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/menu/placeholder.jpg" : item.ImageUrl)" alt="@item.Name">
                            </div>
                            <div class="item-details">
                                <h3>@item.Name</h3>
                                <div class="item-price-qty">
                                    <span class="item-price">₹@item.Price.ToString("F2")</span>
                                    <div class="checkout-qty-controls" data-item-id="@item.Id">
    <button type="button" class="qty-btn decrease" onclick="changeCheckoutQty(@item.Id, -1)">-</button>
<span class="qty-display" id="checkout-qty-@item.Id">@item.Quantity</span>
<button type="button" class="qty-btn increase" onclick="changeCheckoutQty(@item.Id, 1)">+</button>
</div>
                                </div>
                                <div class="item-total">₹@((item.Price * item.Quantity).ToString("F2"))</div>
                            </div>
                        </div>
                    }
                </div>

                <div class="order-totals">
                    <div class="total-row">
                        <span>Subtotal</span>
                        <span>₹@Model.SubTotal.ToString("F2")</span>
                    </div>
                    <div class="total-row">
                        <span>Tax (5%)</span>
                        <span>₹@Model.Tax.ToString("F2")</span>
                    </div>
                    <div class="total-row delivery-fee">
                        <span>Delivery Fee</span>
                        <span>₹@Model.DeliveryFee.ToString("F2")</span>
                    </div>
                    <div class="total-row grand-total">
                        <span>Total</span>
                        <span>₹@Model.Total.ToString("F2")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="/js/cart.js"></script>
    <script>
        $(document).ready(function() {
            // Handle order type selection
            const deliveryRadio = document.getElementById('delivery');
            const pickupRadio = document.getElementById('pickup');
            const deliveryFields = document.getElementById('delivery-fields');
            const deliveryFeeElement = document.querySelector('.delivery-fee');

            function updateOrderType() {
                if (deliveryRadio.checked) {
                    deliveryFields.style.display = 'block';
                    deliveryFeeElement.style.display = 'flex';
                } else {
                    deliveryFields.style.display = 'none';
                    deliveryFeeElement.style.display = 'none';
                }
            }

            deliveryRadio.addEventListener('change', updateOrderType);
            pickupRadio.addEventListener('change', updateOrderType);

            // Initialize
            updateOrderType();

            // Handle address selection
            const addressCards = document.querySelectorAll('.saved-address-card');
            const addressRadios = document.querySelectorAll('input[name="SelectedAddressId"]');

            // Function to update hidden fields with selected address
            function updateSelectedAddress(addressCard) {
                const name = addressCard.getAttribute('data-name');
                const phone = addressCard.getAttribute('data-phone');
                const address = addressCard.getAttribute('data-address');
                const city = addressCard.getAttribute('data-city');
                const state = addressCard.getAttribute('data-state');
                const postal = addressCard.getAttribute('data-postal');

                // Update hidden fields
                document.getElementById('customerName').value = name;
                document.getElementById('customerPhone').value = phone;
                document.getElementById('deliveryAddress').value = address;
                document.getElementById('city').value = city;
                document.getElementById('state').value = state;
                document.getElementById('postalCode').value = postal;
            }

            // Add click event to address cards
            addressCards.forEach(card => {
                card.addEventListener('click', function() {
                    const addressId = this.getAttribute('data-id');
                    const radio = document.getElementById('address-' + addressId);

                    // Select the radio button
                    radio.checked = true;

                    // Update visual selection
                    addressCards.forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');

                    // Update hidden fields
                    updateSelectedAddress(this);
                });
            });

            // Add change event to radio buttons
            addressRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    if (this.checked) {
                        const addressId = this.value;
                        const addressCard = document.querySelector(`.saved-address-card[data-id="${addressId}"]`);

                        // Update visual selection
                        addressCards.forEach(c => c.classList.remove('selected'));
                        addressCard.classList.add('selected');

                        // Update hidden fields
                        updateSelectedAddress(addressCard);
                    }
                });
            });

            // Initialize with the selected address
            const selectedAddressCard = document.querySelector('.saved-address-card.selected');
            if (selectedAddressCard) {
                updateSelectedAddress(selectedAddressCard);
            } else if (addressCards.length > 0) {
                // Select the first address if none is selected
                const firstAddressCard = addressCards[0];
                const firstRadio = document.getElementById('address-' + firstAddressCard.getAttribute('data-id'));

                firstRadio.checked = true;
                firstAddressCard.classList.add('selected');
                updateSelectedAddress(firstAddressCard);
            }

            // Set minimum date and time for delivery
            const now = new Date();
            now.setHours(now.getHours() + 1); // Minimum 1 hour from now
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');

            const minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
            const deliveryTimeInput = document.querySelector('input[type="datetime-local"]');
            deliveryTimeInput.setAttribute('min', minDateTime);

            // Always set the delivery time to 1 hour from now (don't use saved value)
            deliveryTimeInput.value = minDateTime;

            // Enable jQuery validation
            $.validator.setDefaults({
                ignore: [],
                highlight: function(element) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function(element) {
                    $(element).removeClass('is-invalid');
                },
                errorElement: 'div',
                errorClass: 'invalid-feedback',
                errorPlacement: function(error, element) {
                    error.insertAfter(element);
                }
            });

            // Form is now working correctly

            // Add form submission handler
            $('#checkoutForm').on('submit', function(e) {
                console.log('Form submitted');

                // Check if form is valid
                if (!$(this).valid()) {
                    console.log('Form validation failed');
                    e.preventDefault();
                    return false;
                }

                // Check if an address is selected
                const selectedAddressId = $('input[name="SelectedAddressId"]:checked').val();
                if (!selectedAddressId) {
                    alert('Please select a delivery address');
                    e.preventDefault();
                    return false;
                }

                console.log('Form validation passed, submitting...');

                // Show loading indicator
                $('#proceedToPaymentBtn').prop('disabled', true).val('Processing...');

                // Let the form submit normally
                return true;
            });

            $('#proceedToPaymentBtn').on('click', function() {
                console.log('Proceed to Payment button clicked');

                // Show direct link after 5 seconds in case the form submission gets stuck
                setTimeout(function() {
                    $('#directPaymentLink').show();
                    $('#directPaymentLink a').attr('href', '/Checkout/Payment/' + $('#CurrentOrderId').val());
                }, 5000);
            });

            // Add a hidden field to store the current order ID if available
            if ($('#checkoutForm').length > 0) {
                $('<input>').attr({
                    type: 'hidden',
                    id: 'CurrentOrderId',
                    name: 'CurrentOrderId',
                    value: '@Context.Session.GetInt32("CurrentOrderId")'
                }).appendTo('#checkoutForm');
            }

            // Clear special instructions field as per requirement
            $('#Order_SpecialInstructions').val('');

            // Check for redirect from TempData
            @if (TempData["RedirectToPayment"] != null)
            {
                <text>
                console.log('Redirecting to payment page...');
                window.location.href = '@TempData["RedirectToPayment"]';
                </text>
            }
        });
    </script>
}
