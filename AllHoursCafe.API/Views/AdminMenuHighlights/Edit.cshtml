@model AllHoursCafe.API.Models.MenuHighlight
@{
    ViewData["Title"] = "Edit Menu Highlight";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var menuItems = ViewBag.MenuItems as IEnumerable<AllHoursCafe.API.Models.MenuItem> ?? new List<AllHoursCafe.API.Models.MenuItem>();
}

<div class="admin-content-container">
    <div class="admin-header">
        <h1>Edit Menu Highlight</h1>
        <p>Update an existing menu highlight on the home page.</p>
    </div>

    <div class="card">
        <div class="card-header">
            <h2>Edit Menu Highlight</h2>
        </div>
        <div class="card-body">
            <form asp-action="Edit" method="post" enctype="multipart/form-data" id="editHighlightForm">
                <div asp-validation-summary="All" class="alert alert-danger validation-summary" style="display: @(ViewData.ModelState.IsValid ? "none" : "block")"></div>
                <input type="hidden" asp-for="Id" />
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["ErrorMessage"]
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        @TempData["SuccessMessage"]
                    </div>
                }

                <div class="form-group mb-3">
                    <label asp-for="MenuItemId" class="control-label">Menu Item *</label>
                    <select asp-for="MenuItemId" class="form-control @(ViewData.ModelState["MenuItemId"]?.Errors.Count > 0 ? "is-invalid" : "")" required>
                        <option value="">-- Select Menu Item --</option>
                        @foreach (var category in menuItems.GroupBy(m => m.Category?.Name))
                        {
                            <optgroup label="@(category.Key ?? "Uncategorized")">
                                @foreach (var item in category)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </optgroup>
                        }
                    </select>
                    <span asp-validation-for="MenuItemId" class="invalid-feedback d-block"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Section" class="control-label">Section *</label>
                    <select asp-for="Section" class="form-control @(ViewData.ModelState["Section"]?.Errors.Count > 0 ? "is-invalid" : "")" required>
                        <option value="Breakfast">Breakfast</option>
                        <option value="Lunch">Lunch</option>
                        <option value="Dinner">Dinner</option>
                        <option value="Beverages">Beverages</option>
                        <option value="Desserts">Desserts</option>
                        <option value="Snacks">Snacks</option>
                    </select>
                    <span asp-validation-for="Section" class="invalid-feedback d-block"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="DisplayOrder" class="control-label">Display Order *</label>
                    <input asp-for="DisplayOrder" class="form-control @(ViewData.ModelState["DisplayOrder"]?.Errors.Count > 0 ? "is-invalid" : "")" type="number" min="1" max="100" required />
                    <span asp-validation-for="DisplayOrder" class="invalid-feedback d-block"></span>
                    <small class="form-text text-muted">Items with lower numbers will appear first within their section.</small>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="CustomTitle" class="control-label">Custom Title (Optional)</label>
                    <input asp-for="CustomTitle" class="form-control @(ViewData.ModelState["CustomTitle"]?.Errors.Count > 0 ? "is-invalid" : "")" />
                    <span asp-validation-for="CustomTitle" class="invalid-feedback d-block"></span>
                    <small class="form-text text-muted">Leave blank to use the menu item's original name.</small>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="CustomDescription" class="control-label">Custom Description (Optional)</label>
                    <textarea asp-for="CustomDescription" class="form-control @(ViewData.ModelState["CustomDescription"]?.Errors.Count > 0 ? "is-invalid" : "")" rows="3"></textarea>
                    <span asp-validation-for="CustomDescription" class="invalid-feedback d-block"></span>
                    <small class="form-text text-muted">Leave blank to use the menu item's original description.</small>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="CustomImageUrl" class="control-label">Custom Image URL (Optional)</label>
                    <input asp-for="CustomImageUrl" class="form-control @(ViewData.ModelState["CustomImageUrl"]?.Errors.Count > 0 ? "is-invalid" : "")" />
                    <span asp-validation-for="CustomImageUrl" class="invalid-feedback d-block"></span>
                    <small class="form-text text-muted">Enter a URL or upload an image below. Leave blank to use the menu item's original image.</small>
                </div>

                <div class="form-group mb-3">
                    <label class="control-label">Upload Custom Image (Optional)</label>
                    <input type="file" name="ImageFile" id="image-upload" class="form-control" accept="image/*" />
                    <div id="image-preview" class="mt-2">
                        @if (!string.IsNullOrEmpty(Model.CustomImageUrl))
                        {
                            <img src="@Model.CustomImageUrl" alt="Current custom image" style="max-width: 200px; max-height: 200px;" class="img-thumbnail" />
                        }
                    </div>
                </div>

                <div class="form-group mb-3">
                    <div class="form-check">
                        <input asp-for="IsActive" class="form-check-input" />
                        <label asp-for="IsActive" class="form-check-label">Active</label>
                    </div>
                    <small class="form-text text-muted">Inactive highlights will not be displayed on the home page.</small>
                </div>

                <div class="form-group form-actions">
                    <button type="submit" class="btn btn-primary action-btn">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <a asp-action="Index" class="btn btn-secondary action-btn">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .validation-summary {
            margin-bottom: 20px;
        }

        .validation-summary-errors ul {
            margin-bottom: 0;
            padding-left: 20px;
        }

        .invalid-feedback {
            display: block;
            font-weight: 500;
        }

        .is-invalid {
            border-color: #dc3545 !important;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        select.is-invalid {
            padding-right: 4.125rem !important;
        }

        /* Responsive styles for Menu Highlight Edit page */
        .card {
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
        }

        .card-header {
            background-color: var(--primary-color);
            color: white;
            padding: 15px 20px;
        }

        .card-header h2 {
            margin: 0;
            color: white;
            font-size: 1.5rem;
        }

        .card-body {
            padding: 20px;
        }

        /* Form actions styling */
        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .action-btn {
            min-width: 120px;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .admin-content-container {
                padding: 15px 10px;
            }

            .card-body {
                padding: 15px;
            }

            .form-group {
                margin-bottom: 1rem;
            }

            .form-actions {
                flex-direction: column;
                gap: 15px;
            }

            .action-btn {
                display: block;
                width: 100%;
                margin-bottom: 0;
            }

            /* Fix Select2 dropdown on mobile */
            .select2-container {
                width: 100% !important;
            }

            /* Improve image preview on mobile */
            #image-preview img {
                max-width: 100%;
                height: auto;
            }
        }

        /* Medium screens */
        @@media (min-width: 769px) and (max-width: 992px) {
            .admin-content-container {
                padding: 20px;
            }

            .form-actions {
                flex-direction: row;
                justify-content: flex-start;
            }

            .action-btn {
                margin-bottom: 0;
                width: auto;
            }
        }
    </style>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            // Initialize select2 for better dropdown experience
            $('select').select2({
                theme: 'bootstrap4',
            });

            // Initialize validation styling for fields with errors on page load
            @if (!ViewData.ModelState.IsValid)
            {
                <text>
                // Add validation styling to fields with errors
                @foreach (var modelStateEntry in ViewData.ModelState)
                {
                    if (modelStateEntry.Value.Errors.Count > 0)
                    {
                        <text>
                        $('#@modelStateEntry.Key').addClass('is-invalid');
                        </text>
                    }
                }

                // Show validation summary
                $('.validation-summary').show();
                </text>
            }

            // Image preview functionality
            $('#image-upload').on('change', function() {
                var file = this.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        $('#image-preview').html('<img src="' + e.target.result + '" alt="Image preview" style="max-width: 200px; max-height: 200px;" class="img-thumbnail mt-2" />');
                    }
                    reader.readAsDataURL(file);
                }
            });

            // Show/hide image URL field based on file upload
            $('#image-upload').on('change', function() {
                if (this.files.length > 0) {
                    $('#CustomImageUrl').attr('readonly', true);
                } else {
                    $('#CustomImageUrl').attr('readonly', false);
                }
            });

            // Show/hide file upload based on image URL field
            $('#CustomImageUrl').on('input', function() {
                if ($(this).val().trim() !== '') {
                    $('#image-upload').attr('disabled', true);
                } else {
                    $('#image-upload').attr('disabled', false);
                }
            });

            // Initialize the state based on existing values
            if ($('#CustomImageUrl').val().trim() !== '') {
                $('#image-upload').attr('disabled', true);
            }

            // Add form submission handler with logging
            $('#editHighlightForm').on('submit', function(e) {
                e.preventDefault(); // Prevent default form submission
                console.log('Form submission started');

                // Clear any existing messages
                $('.alert').remove();

                // Reset validation styling
                $('.is-invalid').removeClass('is-invalid');
                $('.invalid-feedback').empty();

                // Client-side validation
                var isValid = true;
                var menuItemId = $('#MenuItemId').val();
                var section = $('#Section').val();
                var displayOrder = $('#DisplayOrder').val();
                var customImageUrl = $('#CustomImageUrl').val();

                // Validate required fields
                if (!menuItemId) {
                    $('#MenuItemId').addClass('is-invalid');
                    $('#MenuItemId').next('.invalid-feedback').text('The Menu Item field is required.');
                    isValid = false;
                }

                if (!section) {
                    $('#Section').addClass('is-invalid');
                    $('#Section').next('.invalid-feedback').text('The Section field is required.');
                    isValid = false;
                }

                if (!displayOrder) {
                    $('#DisplayOrder').addClass('is-invalid');
                    $('#DisplayOrder').next('.invalid-feedback').text('The Display Order field is required.');
                    isValid = false;
                }

                // Validate image URL format if provided
                if (customImageUrl && !isValidUrl(customImageUrl)) {
                    $('#CustomImageUrl').addClass('is-invalid');
                    $('#CustomImageUrl').next('.invalid-feedback').text('Please enter a valid URL.');
                    isValid = false;
                }

                if (!isValid) {
                    // Show validation summary
                    var errorSummary = '<div class="validation-summary-errors"><ul>';
                    $('.invalid-feedback').each(function() {
                        var errorText = $(this).text();
                        if (errorText) {
                            errorSummary += '<li>' + errorText + '</li>';
                        }
                    });
                    errorSummary += '</ul></div>';

                    $('.validation-summary').html(errorSummary).show();

                    // Scroll to the top of the form to show the error message
                    $('html, body').animate({
                        scrollTop: $('#editHighlightForm').offset().top - 100
                    }, 200);

                    return false;
                }

                // Helper function to validate URL
                function isValidUrl(url) {
                    try {
                        new URL(url);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }

                // Log form data for debugging
                var formData = new FormData(this);
                for (var pair of formData.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }

                // Add a visual indicator that the form is being submitted
                var submitBtn = $('button[type="submit"]');
                submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Saving...');

                console.log('Validation passed, submitting form');

                // Submit the form using AJAX
                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function(response) {
                        console.log('Form submission successful', response);

                        // Remove any existing messages
                        $('.alert').remove();

                        // Check if the response is a string (HTML) or an object (JSON)
                        if (typeof response === 'string') {
                            // If it's HTML, it might be the whole page - redirect to index
                            console.log('Response is HTML, redirecting to index');
                            window.location.href = '@Url.Action("Index", "AdminMenuHighlights")';
                            return;
                        }

                        // Check if the response contains a redirect URL
                        if (response.redirectUrl) {
                            console.log('Redirecting to:', response.redirectUrl);
                            window.location.href = response.redirectUrl;
                            return;
                        }

                        // Check if the response indicates success
                        if (response.success === false) {
                            // Handle error in success callback (might happen with some frameworks)
                            console.error('Server returned success=false:', response.errorMessage || 'Unknown error');
                            var errorMsg = response.errorMessage || 'An error occurred while saving. Please try again.';
                            var errorMessage = $('<div class="alert alert-danger mt-3">' + errorMsg + '</div>');
                            $('#editHighlightForm').prepend(errorMessage);

                            // Re-enable the submit button
                            submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Save Changes');
                            return;
                        }

                        // Show success message
                        var successMessage = $('<div class="alert alert-success mt-3">Menu highlight updated successfully.</div>');
                        $('#editHighlightForm').prepend(successMessage);

                        // Scroll to the top of the form to show the success message
                        $('html, body').animate({
                            scrollTop: $('#editHighlightForm').offset().top - 100
                        }, 200);

                        // Re-enable the submit button
                        submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Save Changes');

                        // Redirect to index page after a short delay
                        setTimeout(function() {
                            window.location.href = '@Url.Action("Index", "AdminMenuHighlights")';
                        }, 1500);
                    },
                    error: function(xhr, status, error) {
                        console.error('Form submission error:', error);
                        console.error('Status:', status);
                        console.error('Response:', xhr.responseText);

                        // Remove any existing error messages
                        $('.alert-danger').remove();

                        // Reset validation styling
                        $('.is-invalid').removeClass('is-invalid');
                        $('.invalid-feedback').empty();

                        var errorMsg = 'An error occurred while saving. Please try again.';
                        var hasValidationErrors = false;

                        // Try to parse the response to get more detailed error information
                        try {
                            var response = JSON.parse(xhr.responseText);
                            if (response.errorMessage) {
                                errorMsg = response.errorMessage;

                                // If there are validation errors, display them
                                if (response.validationErrors && response.validationErrors.length > 0) {
                                    hasValidationErrors = true;

                                    // Create validation summary
                                    var errorSummary = '<div class="validation-summary-errors"><ul>';
                                    response.validationErrors.forEach(function(err) {
                                        errorSummary += '<li>' + err + '</li>';

                                        // Try to extract field name from error message
                                        var fieldMatch = err.match(/^The\s+(\w+)\s+field/i);
                                        if (fieldMatch && fieldMatch[1]) {
                                            var fieldName = fieldMatch[1];
                                            // Convert field name to match model property names (e.g., "Menu Item" -> "MenuItemId")
                                            if (fieldName === "Menu" || fieldName === "MenuItem") fieldName = "MenuItemId";
                                            if (fieldName === "Display" || fieldName === "DisplayOrder") fieldName = "DisplayOrder";

                                            // Add validation styling to the field
                                            $('#' + fieldName).addClass('is-invalid');
                                            $('#' + fieldName).next('.invalid-feedback').text(err);
                                        }
                                    });
                                    errorSummary += '</ul></div>';

                                    // Show validation summary
                                    $('.validation-summary').html(errorSummary).show();
                                }
                            }
                        } catch (e) {
                            console.error('Error parsing response:', e);
                        }

                        // Show error message if not showing validation errors
                        if (!hasValidationErrors) {
                            var errorMessage = $('<div class="alert alert-danger mt-3">' + errorMsg + '</div>');
                            $('#editHighlightForm').prepend(errorMessage);
                        }

                        // Scroll to the top of the form to show the error message
                        $('html, body').animate({
                            scrollTop: $('#editHighlightForm').offset().top - 100
                        }, 200);

                        // Re-enable the submit button
                        submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Save Changes');
                    }
                });

                return false; // Prevent default form submission
            });
        });
    </script>
}
